//
//  PostDetailPresenter.swift
//  SocialMedia
//
//  Created by Okhan Okbay on 26.12.2020.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation

final class PostDetailPresenter {
    
    // MARK: - Private properties -
    
    private unowned let view: PostDetailViewInterface
    private let interactor: PostDetailInteractorInputInterface
    private let router: PostDetailRouterInterface
    private let post: PostViewModelProtocol
    
    private var cellViewModels: [[MultiPurposeTableCellViewModelable]] = []
    
    // MARK: - Lifecycle -
    
    init(view: PostDetailViewInterface,
         interactor: PostDetailInteractorInputInterface,
         router: PostDetailRouterInterface,
         post: PostViewModelProtocol) {
        
        self.view = view
        self.interactor = interactor
        self.router = router
        self.post = post
    }
}

// MARK: - Extensions -

extension PostDetailPresenter: PostDetailPresenterInterface {
    func viewDidLoad() {
        view.setTitle(Strings.Post.detailTitle.rawValue)
        view.showProgressHUD()
        
        setupInitialCellViewModels()
        interactor.getComments(for: post)
    }
    
    func numberOfSections() -> Int {
        return cellViewModels.count
    }
    
    func numberOfItems(in section: Int) -> Int {
        return cellViewModels[section].count
    }
    
    func item(at section: Int, row: Int) -> MultiPurposeTableCellViewModelable {
        return cellViewModels[section][row]
    }
}

// MARK: - OutputInterface -

extension PostDetailPresenter: PostDetailInteractorOutputInterface {
    func commentsReceived(comments: [CommentViewModelProtocol]) {
        var viewModels: [MultiPurposeTableCellViewModelable] = []
        
        let commentsTitle = "\(Strings.Post.commentsTitle.rawValue) (\(comments.count))"
        let commentsTitleCellViewModel = MultiPurposeTableCellViewModel(leftImage: ImageFactory.comment.image,
                                                                        firstText: commentsTitle)
        viewModels.append(commentsTitleCellViewModel)
        
        if comments.count == 0 {
            let noCommentCellViewModel = MultiPurposeTableCellViewModel(firstText: Strings.Post.noComment.rawValue)
            viewModels.append(noCommentCellViewModel)
            
        } else {
            let commentCellViewModels: [MultiPurposeTableCellViewModel] = comments.map { comment in
                return .init(firstText: comment.name,
                             secondText: comment.email,
                             thirdText: comment.body)
            }
            viewModels.append(contentsOf: commentCellViewModels)
        }
        
        cellViewModels.append(viewModels)
        
        DispatchQueue.main.async {
            self.view.hideProgressHUD()
            self.view.reloadInterface()
        }
    }
}

// MARK: - Initial Setup Helper -

extension PostDetailPresenter {
    func setupInitialCellViewModels() {
        var viewModels: [MultiPurposeTableCellViewModelable] = []
        
        let authorNameCellViewModel = MultiPurposeTableCellViewModel(leftImage: ImageFactory.profile.image, firstText: post.name)
        let postDescriptionCellViewModel = MultiPurposeTableCellViewModel(firstText: post.body)
        
        viewModels.append(authorNameCellViewModel)
        viewModels.append(postDescriptionCellViewModel)
        
        cellViewModels.append(viewModels)
    }
}
