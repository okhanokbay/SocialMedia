//
//  PostsPresenter.swift
//  SocialMedia
//
//  Created by Okhan Okbay on 26.12.2020.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation

final class PostsPresenter {

    // MARK: - Private properties -

    private unowned let view: PostsViewInterface
    private let interactor: PostsInteractorInputInterface
    private let router: PostsRouterInterface

    private(set) var cellViewModels: [MultiPurposeTableCellViewModel] = []

    // MARK: - Lifecycle -

    init(view: PostsViewInterface,
         interactor: PostsInteractorInputInterface,
         router: PostsRouterInterface) {

        self.view = view
        self.interactor = interactor
        self.router = router
    }
}

// MARK: - PresenterInterface -

extension PostsPresenter: PostsPresenterInterface {
    func viewDidLoad() {
        viewDidLoad(on: DispatchQueue.main)
    }

    func viewDidLoad(on queue: DispatchQueueType) {
        queue.async {
            self.view.setTitle(Strings.Post.title.rawValue)
            self.view.showProgressHUD()
        }

        interactor.getPosts()
    }

    func numberOfItems() -> Int {
        return interactor.numberOfItems()
    }

    func item(at index: Int) -> MultiPurposeTableCellViewModelable {
        return cellViewModels[index]
    }

    func didSelectItem(at index: Int) {
        let dataProvider = interactor.getDataProvider()
        let post = interactor.item(at: index)

        DispatchQueue.main.async {
            self.router.navigateToPostDetail(with: dataProvider, post: post)
        }
    }
}

// MARK: - OutputInterface -

extension PostsPresenter: PostsInteractorOutputInterface {
    func postsReceived(_ posts: [PostViewModelProtocol]) {
        cellViewModels = posts.map { MultiPurposeTableCellViewModel(firstText: $0.title,
                                                                    disclosureIndicatorType: .normal) }

        DispatchQueue.main.async {
            self.view.hideProgressHUD()
            self.view.reloadInterface()
        }
    }
}
